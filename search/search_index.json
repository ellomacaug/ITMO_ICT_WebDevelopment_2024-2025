{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e!","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 WEB.</p>"},{"location":"task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"task1/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</li> </ul>"},{"location":"task1/#serverpy","title":"server.py","text":"<pre><code>import socket\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver.bind(('localhost', 8080))\n\nwhile True:\n    data, address = server.recvfrom(1024)\n    server.sendto(b\"Hello, client\", address)\n</code></pre>"},{"location":"task1/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\naddress = ('localhost', 8080)\n\nclient.sendto(b\"Hello, server\", address)\ndata, server = client.recvfrom(1024)\nprint(data.decode('utf-8'))\nclient.close()\n</code></pre>"},{"location":"task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p><code>\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.</code></p>"},{"location":"task2/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</li> </ul>"},{"location":"task2/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport math\n\ndef equation_solution(a, b, c):\n    d = b ** 2 - 4 * a * c\n    if d &lt; 0:\n        return \"No roots\"\n    elif d == 0:\n        root = -b / (2 * a)\n        return f\"One root: {root}\"\n    else:\n        root1 = (-b + math.sqrt(d)) / (2 * a)\n        root2 = (-b - math.sqrt(d)) / (2 * a)\n        return f\"Two roots: {root1}, {root2}\"\n\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 8080))\nserver.listen(4)\n\nwhile True:\n    clientsocket, address = server.accept()\n    data = clientsocket.recv(1024).decode('utf-8')\n    a, b, c = map(float, data.split(','))\n    result = equation_solution(a, b, c)\n    clientsocket.send(result.encode('utf-8'))\n    clientsocket.close()\n</code></pre>"},{"location":"task2/#clientpy","title":"client.py","text":"<pre><code>import socket\n\na = input(\"a:\")\nb = input(\"b:\")\nc = input(\"c:\")\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 8080))\n\nclient.send(f\"{a},{b},{c}\".encode('utf-8'))\nresult = client.recv(1024).decode('utf-8')\nprint(f\"Solution: {result}\")\n\nclient.close()\n</code></pre>"},{"location":"task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"task3/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"task3/#-socket","title":"- \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","text":""},{"location":"task3/#serverpy","title":"server.py","text":"<pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen(4)\n\nwith open('index.html', 'r', encoding='utf-8') as file:\n    content = file.read()\n\nhttp_response = (\n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Content-Type: text/html; charset=utf-8\\r\\n\"\n    \"Content-Length: {}\\r\\n\"\n    \"Connection: close\\r\\n\"\n    \"\\r\\n\"\n    \"{}\"\n).format(len(content.encode('utf-8')), content)\n\nwhile True:\n    connection, address = server_socket.accept()\n    request = connection.recv(1024).decode('utf-8')\n    print(f\"\u0417\u0430\u043f\u0440\u043e\u0441:\\n{request}\")\n    connection.sendall(http_response.encode('utf-8'))\n    connection.close()\n</code></pre>"},{"location":"task3/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 8080))\n\nhttp_request = \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\"\nclient.sendall(http_request.encode('utf-8'))\n\nresponse = client.recv(4096)\nprint(response.decode('utf-8'))\nclient.close()\n</code></pre>"},{"location":"task3/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Some title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. </p>"},{"location":"task4/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</li> </ul>"},{"location":"task4/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport threading\n\nclients = []\ndef handle_client(socket, address):\n    print(f\"New connection: {address}\")\n\n    while True:\n        try:\n            message = socket.recv(1024).decode('utf-8')\n            if not message:\n                break\n            print(f\"Message from {address}: {message}\")\n            broadcast(message, socket)\n        except:\n            break\n    socket.close()\n    clients.remove(socket)\n    print(f\"Member removed: {address}\")\ndef broadcast(message, socket):\n    for client in clients:\n        if client != socket:\n            try:\n                client.send(message.encode('utf-8'))\n            except:\n                client.close()\n                clients.remove(client)\n\ndef start_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 8080))\n    server_socket.listen()\n    print(\"Server is started\")\n    while True:\n        client_socket, client_address = server_socket.accept()\n        clients.append(client_socket)\n        thread = threading.Thread(target=handle_client, args=(client_socket, client_address))\n        thread.start()\n\nstart_server()\n</code></pre>"},{"location":"task4/#clientpy","title":"client.py","text":"<pre><code>import socket\nimport threading\n\ndef receive_messages(socket):\n    while True:\n        try:\n            message = socket.recv(1024).decode('utf-8')\n            if not message:\n                break\n            print(message)\n        except:\n            print(\"Disconnect\")\n            socket.close()\n            break\n\ndef start_client():\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client.connect(('localhost', 8080))\n    receive_thread = threading.Thread(target=receive_messages, args=(client,))\n    receive_thread.start()\n\n    while True:\n        message = input()\n        if message.lower() == 'exit':\n            client.close()\n            break\n        client.send(message.encode('utf-8'))\nstart_client()\n</code></pre>"},{"location":"task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"task5/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p>"},{"location":"task5/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport os\n\ngrades = []\ndef handle_request(request):\n    global grades\n    lines = request.splitlines()\n    request = lines[0].split()\n    if request[0] == 'POST':\n        if len(lines) &gt; 1:\n            data = lines[-1].split('&amp;')\n            discipline = data[0].split('=')[1] if len(data) &gt; 0 else \"unknown\"\n            grade = data[1].split('=')[1] if len(data) &gt; 1 else \"unknown\"\n            grades.append((discipline, grade))\n            update_html_file()\n            print(f\"Saved: {discipline} - {grade}\")\n            return \"HTTP/1.1 200 OK\\r\\n\\r\\nData saved.\"\n        else:\n            return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\nNo data received.\"\n    elif request[0] == 'GET':\n        return serve_html_file()\n    return \"HTTP/1.1 405 Method Not Allowed\\r\\n\\r\\nMethod not allowed.\"\n\ndef update_html_file():\n    with open(\"grades.html\", \"w\", encoding='utf-8') as f:\n        f.write(\"&lt;html&gt;&lt;head&gt;&lt;meta charset='UTF-8'&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Grades&lt;/h1&gt;&lt;table border='1'&gt;\")\n        f.write(\"&lt;tr&gt;&lt;th&gt;Discipline&lt;/th&gt;&lt;th&gt;Grade&lt;/th&gt;&lt;/tr&gt;\")\n        for discipline, grade in grades:\n            f.write(f\"&lt;tr&gt;&lt;td&gt;{discipline}&lt;/td&gt;&lt;td&gt;{grade}&lt;/td&gt;&lt;/tr&gt;\")\n        f.write(\"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\")\n    print(\"file updated\")\n\ndef serve_html_file():\n    if os.path.exists(\"grades.html\"):\n        with open(\"grades.html\", \"r\", encoding='utf-8') as f:\n            content = f.read()\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{content}\"\n    else:\n        return \"HTTP/1.1 404 Not Found\\r\\n\\r\\nNo files\"\n\ndef start_server():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind(('localhost', 8080))\n    server.listen(4)\n    print(\"Server is started on http://localhost:8080\")\n    while True:\n        try:\n            client, addr = server.accept()\n            print(f\"Connection from {addr}\")\n            request = client.recv(1024).decode('utf-8')\n            if request:\n                print(f\"Request received: {request}\")\n                response = handle_request(request)\n                client.sendall(response.encode('utf-8'))\n            client.close()\n        except Exception as e:\n            print(f\"Error: {e}\")\nstart_server()\n</code></pre>"},{"location":"task5/#request","title":"Request:","text":"<p><code>curl -X POST -d \"discipline=English&amp;grade=4\" http://localhost:8080/</code></p>"}]}