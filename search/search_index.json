{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e!","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 WEB.</p>"},{"location":"task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"task1/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</li> </ul>"},{"location":"task1/#serverpy","title":"server.py","text":"<pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_address = ('localhost', 12345)\nserver_socket.bind(server_address)\n\nprint(\"Server is waiting for a client...\")\n\nwhile True:\n    data, client_address = server_socket.recvfrom(1024)\n    print(f\"Message from client: {data.decode('utf-8')}\")\n    response_message = \"Hello, client\"\n    server_socket.sendto(response_message.encode('utf-8'), client_address)\n</code></pre>"},{"location":"task1/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_address = ('localhost', 12345)\nmessage = \"Hello, server\"\nclient_socket.sendto(message.encode('utf-8'), server_address)\nresponse, _ = client_socket.recvfrom(1024)\n\nprint(f\"Message from server: {response.decode('utf-8')}\")\n\nclient_socket.close()\n</code></pre>"},{"location":"task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p><code>\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.</code></p>"},{"location":"task2/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</li> </ul>"},{"location":"task2/#serverpy","title":"server.py","text":"<pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('localhost', 12345)\nserver_socket.bind(server_address)\n\n\nserver_socket.listen(1)\nprint(\"Server is waiting for a client...\")\n\nwhile True:\n\n    client_socket, client_address = server_socket.accept()\n    print(f\"Connected client with the address: {client_address}\")\n\n    try:\n\n        data = client_socket.recv(1024).decode('utf-8')\n        print(f\"Message from client: {data}\")\n\n        a, b, h = map(float, data.split(','))\n\n        result = (a+b)/2 * h\n\n        response_message = f\"Area of the trapezium: {result}\"\n        client_socket.send(response_message.encode('utf-8'))\n\n    except Exception as e:\n        print(f\"Error while calculating the response: {e}\")\n\n    finally:\n        client_socket.close()\n</code></pre>"},{"location":"task2/#clientpy","title":"client.py","text":"<pre><code>import socket\n\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('localhost', 12345)\nclient_socket.connect(server_address)\n\ntry:\n    print(f\"To calculate the area of the trapezium input\")\n    a = float(input(\"Base a: \"))\n    b = float(input(\"Base b: \"))\n    h = float(input(\"Height h: \"))\n\n    message = f\"{a},{b},{h}\"\n    client_socket.send(message.encode('utf-8'))\n\n    response = client_socket.recv(1024).decode('utf-8')\n    print(f\"Server response: {response}\")\n\nexcept Exception as e:\n    print(f\"Error while communicating with the server: {e}\")\n\nfinally:\n    client_socket.close()\n</code></pre>"},{"location":"task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"task3/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"task3/#-socket","title":"- \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","text":""},{"location":"task3/#serverpy","title":"server.py","text":"<pre><code>import socket\n\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('localhost', 5555)\nserver_socket.bind(server_address)\n\n\nserver_socket.listen(1)\nprint(\"Server is waiting for a client...\")\n\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    print(f\"Connected client with the address: {client_address}\")\n\n    try:\n        with open(\"index.html\", \"r\") as file:\n            html_content = file.read()\n        http_response = f\"HTTP/1.1 200 OK\\nContent-Length: {len(html_content)}\\n\\n{html_content}\"\n        client_socket.send(http_response.encode('utf-8'))\n\n    except Exception as e:\n        print(f\"Error while calculating the response: {e}\")\n\n    finally:\n        client_socket.close()\n</code></pre>"},{"location":"task3/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Prozhektor Ksyushi Anisimovoy&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\nThere will be the plot of the Twilight Saga.\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. </p>"},{"location":"task4/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</li> <li>\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</li> </ul>"},{"location":"task4/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport threading\n\n\nclients = {}\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('localhost', 8081)\nserver_socket.bind(server_address)\n\n\nserver_socket.listen(5)\nprint(\"Server is waiting for the clients...\")\n\n\ndef handle_client(client_socket, client_name):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if not message:\n                break\n\n            for name, socket in clients.items():\n                if name != client_name:\n                    socket.send(f\"{client_name}: {message}\".encode('utf-8'))\n\n        except Exception as e:\n            print(f\"Error while receiving a message from {client_name}: {e}\")\n            break\n\n    del clients[client_name]\n    print(f\"{client_name} left.\")\n    client_socket.close()\n\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    print(f\"Connected client with address: {client_address}\")\n\n    client_name = client_socket.recv(1024).decode('utf-8')\n    print(f\"Client {client_name} joined chat.\")\n\n    clients[client_name] = client_socket\n\n    client_thread = threading.Thread(target=handle_client, args=(client_socket, client_name))\n    client_thread.start()\n</code></pre>"},{"location":"task4/#clientpy","title":"client.py","text":"<pre><code>import socket\nimport threading\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            print(message)\n        except Exception as e:\n            print(f\"Error while receiving a message from the server: {e}\")\n            break\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('localhost', 8081)\nclient_socket.connect(server_address)\n\nusername = input(\"Input your name: \")\nclient_socket.send(username.encode('utf-8'))\n\nreceive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\nreceive_thread.start()\n\nwhile True:\n    message = input()\n    if message.lower() == 'exit':\n        break\n    client_socket.send(message.encode('utf-8'))\n\nclient_socket.close()\n</code></pre>"},{"location":"task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"task5/#_1","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p>"},{"location":"task5/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport os\n\ngrades = []\ndef handle_request(request):\n    global grades\n    lines = request.splitlines()\n    request = lines[0].split()\n    if request[0] == 'POST':\n        if len(lines) &gt; 1:\n            data = lines[-1].split('&amp;')\n            discipline = data[0].split('=')[1] if len(data) &gt; 0 else \"unknown\"\n            grade = data[1].split('=')[1] if len(data) &gt; 1 else \"unknown\"\n            grades.append((discipline, grade))\n            update_html_file()\n            print(f\"Saved: {discipline} - {grade}\")\n            return \"HTTP/1.1 200 OK\\r\\n\\r\\nData saved.\"\n        else:\n            return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\nNo data received.\"\n    elif request[0] == 'GET':\n        return serve_html_file()\n    return \"HTTP/1.1 405 Method Not Allowed\\r\\n\\r\\nMethod not allowed.\"\n\ndef update_html_file():\n    with open(\"grades.html\", \"w\", encoding='utf-8') as f:\n        f.write(\"&lt;html&gt;&lt;head&gt;&lt;meta charset='UTF-8'&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Grades&lt;/h1&gt;&lt;table border='1'&gt;\")\n        f.write(\"&lt;tr&gt;&lt;th&gt;Discipline&lt;/th&gt;&lt;th&gt;Grade&lt;/th&gt;&lt;/tr&gt;\")\n        for discipline, grade in grades:\n            f.write(f\"&lt;tr&gt;&lt;td&gt;{discipline}&lt;/td&gt;&lt;td&gt;{grade}&lt;/td&gt;&lt;/tr&gt;\")\n        f.write(\"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\")\n    print(\"file updated\")\n\ndef serve_html_file():\n    if os.path.exists(\"grades.html\"):\n        with open(\"grades.html\", \"r\", encoding='utf-8') as f:\n            content = f.read()\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{content}\"\n    else:\n        return \"HTTP/1.1 404 Not Found\\r\\n\\r\\nNo files\"\n\ndef start_server():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind(('localhost', 8080))\n    server.listen(4)\n    print(\"Server is started on http://localhost:8080\")\n    while True:\n        try:\n            client, addr = server.accept()\n            print(f\"Connection from {addr}\")\n            request = client.recv(1024).decode('utf-8')\n            if request:\n                print(f\"Request received: {request}\")\n                response = handle_request(request)\n                client.sendall(response.encode('utf-8'))\n            client.close()\n        except Exception as e:\n            print(f\"Error: {e}\")\nstart_server()\n</code></pre>"},{"location":"task5/#request","title":"Request:","text":"<p><code>curl -X POST -d \"discipline=English&amp;grade=4\" http://localhost:8080/</code></p>"}]}